From 9def97b77e11e0c38a0c95248ffc8db9c8337651 Mon Sep 17 00:00:00 2001
From: Sawan Roy <sawan.roy@trunexa.com>
Date: Mon, 11 Apr 2022 15:11:07 +0530
Subject: [PATCH] imx8mm: Support to override BT uart and BT fimware

---
 include/bt_vendor_brcm.h |  2 ++
 include/userial_vendor.h | 12 ++++++++++++
 src/bt_vendor_brcm.c     | 43 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 57 insertions(+)

diff --git a/include/bt_vendor_brcm.h b/include/bt_vendor_brcm.h
index 545e76e..bf08b3a 100644
--- a/include/bt_vendor_brcm.h
+++ b/include/bt_vendor_brcm.h
@@ -426,5 +426,7 @@ extern bt_vendor_callbacks_t *bt_vendor_cbacks;
 
 extern int hw_set_audio_state(bt_vendor_op_audio_state_t *p_state);
 
+extern int hw_set_patch_file_name(char *p_conf_name, char *p_conf_value, int param);
+
 #endif /* BT_VENDOR_BRCM_H */
 
diff --git a/include/userial_vendor.h b/include/userial_vendor.h
index 8e8b84f..6791f91 100644
--- a/include/userial_vendor.h
+++ b/include/userial_vendor.h
@@ -171,5 +171,17 @@ void userial_vendor_set_baud(uint8_t userial_baud);
 *******************************************************************************/
 void userial_vendor_ioctl(userial_vendor_ioctl_op_t op, void *p_data);
 
+/*******************************************************************************
+**
+** Function        userial_set_port
+**
+** Description     Configure UART port name
+**
+** Returns         0 : Success
+**                 Otherwise : Fail
+**
+*******************************************************************************/
+int userial_set_port(char *p_conf_name, char *p_conf_value, int param);
+
 #endif /* USERIAL_VENDOR_H */
 
diff --git a/src/bt_vendor_brcm.c b/src/bt_vendor_brcm.c
index 01e89a2..3fcdbd4 100644
--- a/src/bt_vendor_brcm.c
+++ b/src/bt_vendor_brcm.c
@@ -28,9 +28,15 @@
 
 #include <utils/Log.h>
 #include <string.h>
+#include <unistd.h>
+#include <errno.h>
 #include "bt_vendor_brcm.h"
 #include "upio.h"
 #include "userial_vendor.h"
+#include "userial.h"
+#include <cutils/properties.h>
+
+#define CONF_MAX_LINE_LEN 255
 
 #ifndef BTVND_DBG
 #define BTVND_DBG FALSE
@@ -96,6 +102,13 @@ static const tUSERIAL_CFG userial_init_cfg =
 
 static int init(const bt_vendor_callbacks_t* p_cb, unsigned char *local_bdaddr)
 {
+    char uart_value[PROPERTY_VALUE_MAX];
+    char fw_path_value[PROPERTY_VALUE_MAX];
+    char fw_id_value[PROPERTY_VALUE_MAX];
+    char fw_file_value[PROPERTY_VALUE_MAX];
+    int  fd, sz;
+    char buf[CONF_MAX_LINE_LEN];
+
     ALOGI("init");
 
     if (p_cb == NULL)
@@ -122,6 +135,36 @@ static int init(const bt_vendor_callbacks_t* p_cb, unsigned char *local_bdaddr)
 
     vnd_load_conf(VENDOR_LIB_CONF_FILE);
 
+    property_get("ro.boot.bt_uart", uart_value, "0");
+    property_get("ro.boot.bt_sdio", fw_path_value, "0");
+    if ((strcmp(fw_path_value, "0") != 0) && (strcmp(uart_value, "0") != 0))
+    {
+        userial_set_port(NULL, uart_value, 0);
+        memset(buf,'\0', CONF_MAX_LINE_LEN);
+        fd = open(fw_path_value, O_RDONLY);
+        if (fd < 0)
+        {
+            ALOGE("failed to read from %s:(%d)\n", \
+               fw_path_value, errno);
+        }
+        else
+        {
+            sz = read(fd, &buf, sizeof(buf));
+                    close(fd);
+       }
+       property_get("ro.boot.bt_sdio_id", fw_id_value, "0");
+       if (strcmp(fw_id_value, "0") != 0)
+       {
+           if(strncasecmp(buf, fw_id_value, strlen(fw_id_value)) == 0)
+           {
+               property_get("ro.boot.bt_firmware", fw_file_value, "0");
+               if (strcmp(fw_file_value, "0") != 0)
+               {
+                   hw_set_patch_file_name(NULL, fw_file_value, 0);
+               }
+           }
+       }
+    }
     /* store reference to user callbacks */
     bt_vendor_cbacks = (bt_vendor_callbacks_t *) p_cb;
 
-- 
2.7.4

